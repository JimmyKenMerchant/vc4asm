# general definitions

# VPM setup helpers
.func vdr_setup_0(mpitch, rowlen, nrows, dma)
  .assert !(mpitch & (mpitch-1)) && !(mpitch & ~0x7fff0) 
  .assert !((rowlen-1) & ~0xf)
  .assert !((nrows-1) & ~0xf)
  .assert !(dma & ~0x7000ffff) && (dma & 0x70000000) != 0x10000000
  0x80000000 | log2(mpitch/8+1) << 24 | (rowlen & 0xf) << 20 | (nrows & 0xf) << 16 | dma
.endf
.func vdr_setup_1(stride)
  .assert !(stride & ~0x1fff)
  0x90000000 | stride
.endf
.func vdr_h32(vpitch, y, x)
  .assert !((vpitch-1) & ~0xf)
  .assert !(y & ~0x3f)
  .assert !(x & ~0xf)
  (vpitch & 0xf) << 12 | y << 4 | x
.endf
.func vdr_v32(vpitch, y, x)
  .assert !((vpitch-1) & ~0xf)
  .assert !(y & ~0x3f)
  .assert !(x & ~0xf)
  (vpitch & 0xf) << 12 | 0x800 | y << 4 | x
.endf
.func vdw_setup_0(units, depth, dma)
  .assert !((units-1) & ~0x7f)
  .assert !((depth-1) & ~0x7f)
  .assert !(dma & ~0x7fff)
  0x80000000 | (units & 0x7f) << 23 | (depth & 0x7f) << 16 | (dma & 0xffff)
.endf
.func vdw_setup_1(stride)
  .assert !(stride & ~0xffff) # VPM supports 16 bit stride rather than 13 as documented
  0xc0000000 | stride
.endf
.func dma_h32(y, x)
  .assert !(y & ~0x7f)
  .assert !(x & ~0xf)
  0x4000 | y << 7 | x << 3
.endf
.func dma_v32(y, x)
  .assert !(y & ~0x7f)
  .assert !(x & ~0xf)
  y << 7 | x << 3
.endf
.func vpm_setup(num, stride, dma)
  .assert !((num-1) & ~0xf)
  .assert !((stride-1) & ~0x3f)
  .assert !(dma & ~0xfff)
  (num & 0xf) << 20 | (stride & 0x3f) << 12 | dma
.endf
.func h32(y, x)
  .assert !(y & ~0x30)
  .assert !(x & ~0xf)
  0xa00 | y | x
.endf
.func v32(y, x)
  .assert !(y & ~0x30)
  .assert !(x & ~0xf)
  0x200 | y | x
.endf

# functional semaphore style
.set sacq(i) sacq0 + i
.set srel(i) srel0 + i

# operand type query macros
.set isConstant(x)  x < [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2]
.set isLdPE(x)      x >= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2] && x < :[0,0,0]
.set isLdPES(x)     x >= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2] && x < [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2]
.set isLdPEU(x)     x >= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] && x < :[0,0,0]
.set isRegister(x)  x >= :[0,0,0] && x < :[0,16,0]
.set isRegfileA(x)  isRegister(x) && (x & :[0,1,0]) == :[0,1,0]
.set isRegfileB(x)  isRegister(x) && (x & :[0,2,0]) == :[0,2,0]
.set isAccu(x)      isRegister(x) && (x & :[-8,0x34,0]) == :[32,0,0] && (x & :[-2,0,0]) != :[38,0,0] 
.set isReadable(x)  isRegister(x) && (x & :[0,4,0]) == :[0,4,0] || x == r5
.set isWritable(x)  isRegister(x) && (x & :[0,8,0]) == :[0,8,0]
.set isRotate(x)    isRegister(x) && (x & :[0,0,-1]) != :[0,0,0]
.set isSemaphore(x) x >= :[0,16,0] && x <= :[-1,-1,-1]
.set isLabel(x)     x > :[-1,-1,-1]
.set isSmallImmd(x) isConstant(x) && (!(x+16 & ~0x1f) || !(i-0x3b800000 & 0xf87fffff))

# mathematics
.func min(x,y)
  .if x < y
    y
  .else
    x
  .endif
.endf
.func min(x,y)
  .if x > y
    x
  .else
    y
  .endif
.endf
.func log2(x) # unsigned!
  .if !(x & ~0x3)
    x - 1 - (x == 3) 
  .elseif !(x & ~0xf)
    log2(x >>> 2) + 2
  .elseif !(x & ~0xff)
    log2(x >>> 4) + 4
  .elseif !(x & ~0xffff)
    log2(x >>> 8) + 8
  .else
    log2(x >>> 16) + 16
  .endif
.endf
.func countBits(x)
  .lset x, x                - ((x >>> 1) & 0x55555555)
  .lset x, (x & 0x33333333) + ((x >>> 2) & 0x33333333)
  .lset x, (x & 0x0f0f0f0f) + ((x >>> 4) & 0x0f0f0f0f)
  .lset x, (x & 0x00ff00ff) + ((x >>> 8) & 0x00ff00ff)
  (x & 0x0000ffff) + (x >>> 16)
.endf
.func reverseBits(x)
  .lset x, ((x & 0xaaaaaaaa) >>> 1) | ((x & 0x55555555) <<< 1)
  .lset x, ((x & 0xcccccccc) >>> 2) | ((x & 0x33333333) <<< 2)
  .lset x, ((x & 0xf0f0f0f0) >>> 4) | ((x & 0x0f0f0f0f) <<< 4)
  .lset x, ((x & 0xff00ff00) >>> 8) | ((x & 0x00ff00ff) <<< 8)
  (x >>> 16) | (x <<< 16)
.endf